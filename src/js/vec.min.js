export class Vec2{constructor(x,y){this.x=x;this.y=y}static add(a,b){return new Vec2(a.x+b.x,a.y+b.y)}static angleBetween(a,b){const MA=a.magnitude;const MB=b.magnitude;if(MA===0||MB===0){console.error("Cannot divide by zero.");return NaN}return Math.acos(Vec2.dot(a,b)/(MA*MB))}static distance(a,b){const S=a.x-b.x;const T=a.y-b.y;return Math.sqrt(S*S+T*T)}static distanceChebyshev(a,b){return Math.max(Math.abs(a.x-b.x),Math.abs(a.y-b.y))}static distanceManhattan(a,b){return Math.sqrt(Math.abs(a.x-b.x)+Math.abs(a.y-b.y))}static distanceMinkowski(a,b,e){if(e===0){console.error("Cannot divide by zero.");return NaN}return(Math.abs(a.x-b.x)**e+Math.abs(a.y-b.y)**e)**(1/e)}static dot(a,b){return a.x*b.x+a.y*b.y}static fromCopy(a){return new Vec2({...a}.x,{...a}.y)}static fromPolarCoords(radius,phi){return new Vec2(radius*Math.cos(phi),radius*Math.sin(phi))}static project(a,b){const PM=a.magnitude*Math.cos(Vec2.angleBetween(a,b));const P=Vec2.fromCopy(b);P.normalize();P.scale(PM);return P}static subtract(a,b){return new Vec2(a.x-b.x,a.y-b.y)}get angleX(){return Math.atan2(this.y,this.x)}get angleY(){return Math.atan2(this.x,this.y)}get magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y)}set limit(max){if(this.magnitude>max){this.normalize();this.scale(max)}}set magnitude(m){this.normalize();this.scale(m)}add(a){this.x=this.x+a.x;this.y=this.y+a.y}clamp(max,min){const M=this.magnitude;if(M>max){this.magnitude=max;return}else if(M<min){this.magnitude=min}}copy(a){this.x={...a}.x;this.y={...a}.y}normalize(){let m=this.magnitude;if(m===0)m=1;else m=1/m;this.x=this.x*m;this.y=this.y*m}scale(val){this.x=this.x*val;this.y=this.y*val}subtract(a){this.x=this.x-a.x;this.y=this.y-a.y}}export class Vec3{constructor(x,y,z){this.x=x;this.y=y;this.z=z}static add(a,b){return new Vec3(a.x+b.x,a.y+b.y,a.z+b.z)}static angleBetween(a,b){const MA=a.magnitude;const MB=b.magnitude;if(MA===0||MB===0){console.error("Cannot divide by zero.");return NaN}return Math.acos(Vec3.dot(a,b)/(MA*MB))}static cross(a,b){return new Vec3(a.y*b.z-b.y*a.z,a.z*b.x-b.z*a.x,a.x*b.y-b.x*a.y)}static distance(a,b){const S=a.x-b.x;const T=a.y-b.y;const P=a.z-b.z;return Math.sqrt(S*S+T*T+P*P)}static distanceChebyshev(a,b){return Math.max(Math.abs(a.x-b.x),Math.abs(a.y-b.y),Math.abs(a.z-b.z))}static distanceManhattan(a,b){return Math.sqrt(Math.abs(a.x-b.x)+Math.abs(a.y-b.y)+Math.abs(a.z-b.z))}static distanceMinkowski(a,b,e){if(e===0){console.error("Cannot divide by zero.");return NaN}return(Math.abs(a.x-b.x)**e+Math.abs(a.y-b.y)**e+Math.abs(a.z-b.z)**e)**(1/e)}static dot(a,b){return a.x*b.x+a.y*b.y+a.z*b.z}static fromCopy(a){return new Vec3({...a}.x,{...a}.y,{...a}.z)}static fromSphericalCoords(radius,phi,theta){return new Vec3(radius*Math.cos(phi)*Math.sin(theta),radius*Math.sin(phi)*Math.sin(theta),radius*Math.cos(theta))}static project(a,b){const PM=a.magnitude*Math.cos(Vec3.angleBetween(a,b));const P=Vec3.fromCopy(b);P.normalize();P.scale(PM);return P}static subtract(a,b){return new Vec3(a.x-b.x,a.y-b.y,a.z-b.z)}get angleX(){return Math.atan2(Math.sqrt(this.y**2+this.z**2),this.x)}get angleY(){return Math.atan2(Math.sqrt(this.x**2+this.z**2),this.y)}get angleZ(){return Math.atan2(Math.sqrt(this.x**2+this.y**2),this.z)}get magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}set limit(max){if(this.magnitude>max){this.normalize();this.scale(max)}}set magnitude(m){this.normalize();this.scale(m)}add(a){this.x=this.x+a.x;this.y=this.y+a.y;this.z=this.z+a.z}clamp(max,min){const M=this.magnitude;if(M>max){this.magnitude=max;return}else if(M<min){this.magnitude=min}}copy(a){this.x={...a}.x;this.y={...a}.y;this.z={...a}.z}normalize(){let m=this.magnitude;if(m===0)m=1;else m=1/m;this.x=this.x*m;this.y=this.y*m;this.z=this.z*m}scale(val){this.x=this.x*val;this.y=this.y*val;this.z=this.z*val}subtract(a){this.x=this.x-a.x;this.y=this.y-a.y;this.z=this.z-a.z}}export class Vec4{constructor(x,y,z,w){this.x=x;this.y=y;this.z=z;this.w=w}static add(a,b){return new Vec4(a.x+b.x,a.y+b.y,a.z+b.z,a.w+b.w)}static angleBetween(a,b){const MA=a.magnitude;const MB=b.magnitude;if(MA===0||MB===0){console.error("Cannot divide by zero.");return NaN}return Math.acos(Vec4.dot(a,b)/(MA*MB))}static distance(a,b){const S=a.x-b.x;const T=a.y-b.y;const P=a.z-b.z;const Q=a.w-b.w;return Math.sqrt(S*S+T*T+P*P+Q*Q)}static distanceChebyshev(a,b){return Math.max(Math.abs(a.x-b.x),Math.abs(a.y-b.y),Math.abs(a.z-b.z),Math.abs(a.w-b.w))}static distanceManhattan(a,b){return Math.sqrt(Math.abs(a.x-b.x)+Math.abs(a.y-b.y)+Math.abs(a.z-b.z)+Math.abs(a.w-b.w))}static distanceMinkowski(a,b,e){if(e===0){console.error("Cannot divide by zero.");return NaN}return(Math.abs(a.x-b.x)**e+Math.abs(a.y-b.y)**e+Math.abs(a.z-b.z)**e+Math.abs(a.w-b.w)**e)**(1/e)}static dot(a,b){return a.x*b.x+a.y*b.y+a.z*b.z+a.w*b.w}static fromCopy(a){return new Vec4({...a}.x,{...a}.y,{...a}.z,{...a}.w)}static project(a,b){const PM=a.magnitude*Math.cos(Vec4.angleBetween(a,b));const P=Vec4.fromCopy(b);P.normalize();P.scale(PM);return P}static subtract(a,b){return new Vec4(a.x-b.x,a.y-b.y,a.z-b.z,a.w-b.w)}get angleX(){return Math.atan2(Math.sqrt(this.y**2+this.z**2),this.x)}get angleY(){return Math.atan2(Math.sqrt(this.x**2+this.z**2),this.y)}get angleZ(){return Math.atan2(Math.sqrt(this.x**2+this.y**2),this.z)}get magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}set limit(max){if(this.magnitude>max){this.normalize();this.scale(max)}}set magnitude(m){this.normalize();this.scale(m)}add(a){this.x=this.x+a.x;this.y=this.y+a.y;this.z=this.z+a.z;this.w=this.w+a.w}clamp(max,min){const M=this.magnitude;if(M>max){this.magnitude=max;return}else if(M<min){this.magnitude=min}}copy(a){this.x={...a}.x;this.y={...a}.y;this.z={...a}.z;this.w={...a}.w}normalize(){let m=this.magnitude;if(m===0)m=1;else m=1/m;this.x=this.x*m;this.y=this.y*m;this.z=this.z*m;this.w=this.w*m}scale(val){this.x=this.x*val;this.y=this.y*val;this.z=this.z*val;this.w=this.w*val}subtract(a){this.x=this.x-a.x;this.y=this.y-a.y;this.z=this.z-a.z;this.w=this.w-a.w}}
