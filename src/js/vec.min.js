export class Vec2{constructor(x,y){this.x=x||0;this.y=y||0}static add(a,b){return new Vec2(a.x+b.x,a.y+b.y)}static angleBetween(a,b){const MA=a.magnitude;const MB=b.magnitude;if(MA===0||MB===0){console.error("Cannot divide by zero.");return NaN}return Math.acos(Vec2.dot(a,b)/(MA*MB))}static clone(a){return new Vec2(...a.xy)}static distance(a,b){const abx=a.x-b.x;const aby=a.y-b.y;return Math.sqrt(abx*abx+aby*aby)}static distanceChebyshev(a,b){return Math.max(Math.abs(a.x-b.x),Math.abs(a.y-b.y))}static distanceManhattan(a,b){return Math.sqrt(Math.abs(a.x-b.x)+Math.abs(a.y-b.y))}static distanceMinkowski(a,b,e){if(e===0){console.error("Cannot divide by zero.");return NaN}return(Math.abs(a.x-b.x)**e+Math.abs(a.y-b.y)**e)**(1/e)}static dot(a,b){return a.x*b.x+a.y*b.y}static equal(a,b){return a.x===b.x&&a.y===b.y}static fromCopy(a){return new Vec2({...a}.x,{...a}.y)}static fromPolarCoords(radius,phi){return new Vec2(radius*Math.cos(phi),radius*Math.sin(phi))}static project(a,b){const PM=a.magnitude*Math.cos(Vec2.angleBetween(a,b));const P=Vec2.clone(b);P.normalize();P.scale(PM);return P}static subtract(a,b){return new Vec2(a.x-b.x,a.y-b.y)}get angleX(){return Math.atan2(this.y,this.x)}get angleY(){return Math.atan2(this.x,this.y)}get magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y)}get xy(){return[this.x,this.y]}set limit(max){if(this.magnitude>max){this.normalize();this.scale(max)}return this}set magnitude(m){this.normalize();this.scale(m);return this}set xy(xy){this.x=xy[0];this.y=xy[1];return this}add(a){this.x=this.x+a.x;this.y=this.y+a.y;return this}clamp(max,min){const M=this.magnitude;if(M>max)this.magnitude=max;else if(M<min)this.magnitude=min;return this}copy(a){this.xy=a.xy;return this}normalize(){let m=this.magnitude;if(m===0)m=1;else m=1/m;this.x=this.x*m;this.y=this.y*m;return this}rotateAxisZ(phi){[this.x,this.y]=[this.x*Math.cos(phi)-this.y*Math.sin(phi),this.x*Math.sin(phi)+this.y*Math.cos(phi)];return this}scale(val){this.x=this.x*val;this.y=this.y*val;return this}subtract(a){this.x=this.x-a.x;this.y=this.y-a.y;return this}}